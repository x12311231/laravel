<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Console\Command;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Meilisearch\Client;
use Tests\TestCase;

class ScoutTest extends TestCase
{
    use RefreshDatabase;
    protected $client;
    /**
     * A basic feature test example.
     */
    public function test_example(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }


//    public function setUp(): void
//    {
//
////        $shell_exec = shell_exec("php artisan scout:sync-index-settings");
////        self::assertEquals('Settings for the [users] index synced successfully.', $shell_exec);
//    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client = new Client(env('MEILISEARCH_HOST', 'http://localhost:7700'), env('MEILISEARCH_KEY'));
        $pendingCommand1 = $this->artisan("scout:delete-all-indexes");
        $pendingCommand1->expectsOutput('All indexes deleted successfully.');
        $pendingCommand1->execute();
        $pendingCommand = $this->artisan("scout:sync-index-settings");
        $pendingCommand->assertSuccessful();
//        $pendingCommand->expectsOutputToContain("successfully");
        $pendingCommand->expectsOutput("Settings for the [users] index synced successfully.");
        $execute = $pendingCommand->execute();

        echo 1;

    }

    public function test_sync()
    {
        User::factory(12)->create();
        sleep(1);
        $documentsResults = $this->client->index('users')->getDocuments();
        $count = $documentsResults->count();
        self::assertEquals(12, $count);
    }

    public function test_search()
    {
        User::factory(1)->create([
            'email' => 'test@qq.com',
        ]);
        User::factory(11)->create([
        ]);
        sleep(1);
        $hits = $this->client->index('users')
            ->search('test@qq.com')
            ->getHits();
        self::assertNotNull($hits);
    }

    public function test_route_search()
    {

        User::factory(1)->create([
            'email' => 'test@qq.com',
        ]);
        User::factory(11)->create([
        ]);
        sleep(1);
        $uri = url('/search?search=test@qq.com');
        $testResponse = $this->get($uri, ['Accept' => 'application/json']);
        $testResponse->assertOk();
        $testResponse->assertJsonCount(1);
    }

    public function test_searchable()
    {
        User::factory(11)->create([
        ]);
        sleep(1);
        $pendingCommand = $this->artisan('scout:flush App\\\Models\\\User');
        $pendingCommand->expectsOutput('All [App\Models\User] records have been flushed.');
        $pendingCommand->execute();
        $user = User::firstOrFail();
        $testResponse = $this->get('/searchable/' . $user->id);
        $testResponse->assertOk();
        $testResponse = $this->get('/searchable/' . $user->id);
        $testResponse->assertOk();
        sleep(1);
        $documentsResults = $this->client->index('users')->getDocuments();
        $count = $documentsResults->count();
        self::assertEquals(1, $count);
        $testResponse = $this->get('/searchable/' . ($user->id + 1));
        $testResponse->assertOk();
        sleep(1);
        $documentsResults = $this->client->index('users')->getDocuments();
        $count = $documentsResults->count();
        self::assertEquals(2, $count);
    }

    public function test_noSearchable()
    {
        User::factory(11)->create([
        ]);
        sleep(1);
        $pendingCommand = $this->artisan('scout:flush App\\\Models\\\User');
        $pendingCommand->expectsOutput('All [App\Models\User] records have been flushed.');
        $pendingCommand->execute();
        $user = User::firstOrFail();
        $testResponse = $this->get('/noSearchable/' . $user->id);
        $testResponse->assertOk();
        $testResponse = $this->get('/noSearchable/' . $user->id);
        $testResponse->assertOk();
        sleep(1);
        $documentsResults = $this->client->index('users')->getDocuments();
        $count = $documentsResults->count();
        self::assertEquals(0, $count);
        $testResponse = $this->get('/noSearchable/' . ($user->id + 1));
        $testResponse->assertOk();
        sleep(1);
        $documentsResults = $this->client->index('users')->getDocuments();
        $count = $documentsResults->count();
        self::assertEquals(0, $count);
    }
}
